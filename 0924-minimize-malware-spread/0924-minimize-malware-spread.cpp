class Solution {
public:
    vector<int> g[305];
    int n, m;
    void dfs(int node, vector<bool> &vis)
    {
        vis[node] = true;
        for(auto v : g[node])
        {
            if(!vis[v])
            {
                dfs(v, vis);
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        n = graph.size();
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(i==j)continue;
                if(graph[i][j])
                {
                    g[i].push_back(j);
                }
            }
        }
        m = initial.size();
        int ans = -1;
        int mini = 1e9;
        for(int i=0; i<initial.size(); i++)
        {
            int cnt = 0;
            vector<bool> vis(n+1, false);
            for(int j=0; j<initial.size(); j++)
            {
                if(i==j)
                {
                    continue;
                }
                dfs(initial[j], vis);
            }
            for(int j=0; j<=n; j++)
            {
                if(vis[j])
                {
                    cnt++;
                }
            }
            if(mini>cnt)
            {
                ans = initial[i];
                mini = cnt;
            }
        }
        return ans;
    }
};